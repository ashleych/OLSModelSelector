selectedModelCharter(selectedModel,allModelEvaluated)
selectedModelCharter <- function(selectedModel, allModelEvaluated) {
predicted_df <- selectedModelForecaster(selectedModel, allModelEvaluated)
ODR <- trimws(unlist(strsplit(selectedModel, '[~]'))[[1]])
ggplot(predicted_df, aes(lubridate::dmy(Date))) +
geom_line(aes(y = predicted_values, colour = "predicted")) +
geom_line(aes(y = get(ODR), colour = "DR")) + xlab("Date") + ylab("Default Rates") +
ggtitle(paste0("Model results for ", selectedModel)) + theme(plot.title = element_text(size =  8, hjust = 0.5)) +  annotation_custom(geom="predicted_df",x = 37, y = -0.8, label = list(table), vjust = 1, hjust = 0   )
}
selectedModelCharter(selectedModel,allModelEvaluated)
selectedModelCharter <- function(selectedModel, allModelEvaluated) {
predicted_df <- selectedModelForecaster(selectedModel, allModelEvaluated)
ODR <- trimws(unlist(strsplit(selectedModel, '[~]'))[[1]])
ggplot(predicted_df, aes(lubridate::dmy(Date))) +
geom_line(aes(y = predicted_values, colour = "predicted")) +
geom_line(aes(y = get(ODR), colour = "DR")) + xlab("Date") + ylab("Default Rates") +
ggtitle(paste0("Model results for ", selectedModel)) + theme(plot.title = element_text(size =  8, hjust = 0.5)) +  annotation_custom(geom="predicted_df" )
}
selectedModelCharter(selectedModel,allModelEvaluated)
selectedModelCharter <- function(selectedModel, allModelEvaluated) {
predicted_df <- selectedModelForecaster(selectedModel, allModelEvaluated)
ODR <- trimws(unlist(strsplit(selectedModel, '[~]'))[[1]])
ggplot(predicted_df, aes(lubridate::dmy(Date))) +
geom_line(aes(y = predicted_values, colour = "predicted")) +
geom_line(aes(y = get(ODR), colour = "DR")) + xlab("Date") + ylab("Default Rates") +
ggtitle(paste0("Model results for ", selectedModel)) + theme(plot.title = element_text(size =  8, hjust = 0.5)) +  annotation_custom(geom="predicted_df" , label=list(predicted_df))
}
selectedModelCharter(selectedModel,allModelEvaluated)
predicted_df
t(predicted_df)
t(predicted_df)
data.table(t(predicted_df))
datatable(t(predicted_df))
DT::datatable(t(predicted_df))
selectedModelCharter <- function(selectedModel, allModelEvaluated) {
predicted_df <- selectedModelForecaster(selectedModel, allModelEvaluated)
ODR <- trimws(unlist(strsplit(selectedModel, '[~]'))[[1]])
ggplot(predicted_df, aes(lubridate::dmy(Date))) +
geom_line(aes(y = predicted_values, colour = "predicted")) +
geom_line(aes(y = get(ODR), colour = "DR")) + xlab("Date") + ylab("Default Rates") +
ggtitle(paste0("Model results for ", selectedModel)) + theme(plot.title = element_text(size =  8, hjust = 0.5))
}
selectedModelCharter(selectedModel,allModelEvaluated)
selectedModelObject
summary(selectedModelObject)
model_1<- list(LHS="DR", RHS=c("avg_oil_pri_barrel_lag_3","avg_oil_pri_barrel_lag_2"))
reporter <- function(model_1, multiple= FALSE) {
allModels -> modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model_1$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
search()
t<-reporter(model_1)
reporter <- function(model_1, multiple= FALSE) {
allModels -> ST.auto.1::modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model_1$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
reporter <- function(model_1, multiple= FALSE) {
allModels -> ST.auto.1:::modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model_1$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
devtools::document()
getwd()
setwd("ST_auto_1")
dir
dir()
setwd("ST.auto.1")
devtools::document()
install()
devtools::install()
reporter <- function(model_1, multiple= FALSE) {
allModels -> ST.auto.1:::modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model_1$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
reporter <- function(model_1, multiple= FALSE) {
allModels -> modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model_1$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
library(ST.auto.1,lib.loc = getwd())
t<-reporter(model_1)
model_1<- list(LHS="DR", RHS=c("avg_oil_pri_barrel_lag_3","avg_oil_pri_barrel_lag_2"))
allModels -> modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
# mdata<-readxl::read_excel("data/MacroDataAC.xlsx")
validationSampler(macrodata,1:29,30:33,1:48)
vars<-c("ECI_yoy_ch_3QMA_lag_4", "avg_oil_pri_barrel_3QMA", "Rl_est_Dub_q_yoy_ch_lag_1", "avg_oil_pri_barrel_3QMA_lag_2", "Non_oil_ECI_yoy_ch_3QMA_lag_3", "Non_oil_ECI_yoy_ch_6QMA", "avg_oil_pri_barrel", "avg_oil_pri_barrel_3QMA_lag_1", "avg_oil_pri_barrel_6QMA_lag_1", "avg_oil_pri_barrel_lag_2", "avg_oil_pri_barrel_lag_3")
allModels<-modelDeveloper("DR",vars, trainData = train_df,no_of_vars = 2)
model_1<- list(LHS="DR", RHS=c("avg_oil_pri_barrel_lag_3","avg_oil_pri_barrel_lag_2"))
allModels -> modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
allModels <- modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
reporter <- function(model_1, multiple= FALSE) {
allModels <- modelDeveloper(model_1$LHS,model_1$RHS,no_of_vars = length(RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model_1$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model_1$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model_1$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
debugonce(reporter)
t<-reporter(model_1)
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model_1$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
debugonce(reporter)
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model_1$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
debugonce(reporter)
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model_1$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
debugonce(reporter)
t<-reporter(model_1)
model_1<- list(LHS="DR", RHS=c("avg_oil_pri_barrel_lag_3","avg_oil_pri_barrel_lag_2"))
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars = model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
debugonce(reporter)
t<-reporter(model_1)
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars <- model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
debugonce(reporter)
t<-reporter(model_1)
vars
allModelEvaluated
allModelEvaluated$model
allModels[[selectedModel]]
debugonce(reporter)
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
vars <- model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
t<-reporter(model_1)
debugonce(reporter)
t<-reporter(model_1)
traceback()
debugonce(reporter)
t<-reporter(model_1)
vars
vars<-c("ECI_yoy_ch_3QMA_lag_4", "avg_oil_pri_barrel_3QMA", "Rl_est_Dub_q_yoy_ch_lag_1", "avg_oil_pri_barrel_3QMA_lag_2", "Non_oil_ECI_yoy_ch_3QMA_lag_3", "Non_oil_ECI_yoy_ch_6QMA", "avg_oil_pri_barrel", "avg_oil_pri_barrel_3QMA_lag_1", "avg_oil_pri_barrel_6QMA_lag_1", "avg_oil_pri_barrel_lag_2", "avg_oil_pri_barrel_lag_3")
allModels<-modelDeveloper("DR",vars, trainData = train_df,no_of_vars = 2)
allModelsDiagnostics<-modelDiagnostics(allModels)
allModelsDiagnostics
class(allModelsDiagnostics)
RHS<-allModelsDiagnostics[,c("LHS","RHS") = tstrsplit(model,"[~]")][,LHS:=NULL]
RHS<-allModelsDiagnostics[,c("LHS","RHS") = tstrsplit(model,"[~]")]
RHS<-allModelsDiagnostics[,tstrsplit(model,"[~]")]
RHS
RHS<-allModelsDiagnostics[,tstrsplit(model,"[~]")][,V1:=NULL]
RHS
RHS
RHS<-allModelsDiagnostics[,tstrsplit(model,"[~]")][,V1:=NULL]
RHS[,RHS:=strsplit(RHS,"[+]")]
RHS[,RHS:=strsplit(V2,"[+]")]
RHS
unlist(RHS[,strsplit(V2,"[+]")])
union(unlist(RHS[,strsplit(V2,"[+]")]))
unique(unlist(RHS[,strsplit(V2,"[+]")]))
trimws(unique(unlist(RHS[,strsplit(V2,"[+]")])))
vars <-trimws(unique(unlist(allModelsDiagnostics[,tstrsplit(model,"[~]")][,V1:=NULL][,strsplit(RHS,"[+]")])))
vars <-trimws(unique(unlist(allModelsDiagnostics[,tstrsplit(model,"[~]")][,V1:=NULL][,strsplit(V2,"[+]")])))
vars
devtools::document()
devtools::inst()
devtools::install()
library(ST.auto.1,lib.loc = getwd())
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
#vars <- model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
}
debugonce(reporter)
t<-reporter(model_1)
t
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
#vars <- model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
names(report_details) =c("(report_summary", "report_selectedModelDiagnostics", "report_predicted_df", "report_pred_plot)")
}
t<-reporter(model_1)
t
reporter <- function(model, multiple= FALSE) {
allModels <- modelDeveloper(model$LHS,model$RHS,no_of_vars = length(model$RHS),multiple = multiple)
#debugonce(modelDiagnostics)
allModelsDiagnostics<-modelDiagnostics(allModels)
#vars <- model$RHS
allModelEvaluated<- modelEvaluator(allModelsDiagnostics)
#debugonce(modelEvaluator)
selectedModel <-
allModelEvaluated$model # have chosen a model that passes all tests
selectedModelObject <- allModels[[selectedModel]]
report_summary <- summary(selectedModelObject)
report_selectedModelDiagnostics <- selectedModelDiagnostics(selectedModel, allModelEvaluated)
report_predicted_df <-
selectedModelForecaster(selectedModel, allModelEvaluated)
report_pred_plot <-
selectedModelCharter(selectedModel, allModelEvaluated)
report_details <- list(report_summary,report_selectedModelDiagnostics,report_predicted_df,report_pred_plot)
names(report_details) = c("report_summary", "report_selectedModelDiagnostics", "report_predicted_df", "report_pred_plot")
report_details
}
t<-reporter(model_1)
t
t$report_summary
t$report_selectedModelDiagnostics
t$report_pred_plot
library(devtools)
document()
install()
library(ST.auto.1,lib.loc = getwd())
t$report_summary
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
t$report_summary
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
t$report_summary
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
## Load library
library(data.table)
library(ST.auto.1)
library(rmarkdown)
library(knitr)
library(DT)
## Set knitr options
opts_chunk$set(
fig.width = 10,
fig.height = 6,
echo = FALSE,
warning = FALSE
)
DT::datatable(t(t$report_predicted_df),options = list(scrollX = TRUE,style = "font-size: 30%"))
DT::datatable(t(t$report_predicted_df),options = list(scrollX = TRUE,style = "font-size: 10%"))
DT::datatable(t(t$report_predicted_df),style = "font-size: 10%")
DT::datatable(t(t$report_predicted_df),style = "font-size: 10%")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
sessionInfo()
packageVersion("Rmarkdown")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
install_github('rstudio/rmarkdown')
library(devtools)
install_github('rstudio/rmarkdown')
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
sessionInfo()
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
remove.packages("rmarkdown")
install_github('rstudio/rmarkdown')
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
remove.packages("rmarkdown")
url_id <- "https://cran.r-project.org/src/contrib/Archive/rmarkdown/	rmarkdown_1.11.tar.gz"
url_id <- "https://cran.r-project.org/src/contrib/Archive/rmarkdown/rmarkdown_1.11.tar.gz"
url_id
install.packages(url_id, repos=NULL, type="source")
library(rmarkdown)
session_info()
library(rmarkdown,lib.loc = "C:\Users\Lenovo\Documents\R\win-library\3.5")
library(rmarkdown,lib.loc = "C:\\Users\\Lenovo\\Documents\\R\\win-library\\3.5")
sessionInfo()
rmarkdown::render("selectedModelReport.Rmd")
library(rmarkdown)
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
remotes::install_github('rstudio/rmarkdown')
remotes::install_github('rstudio/rmarkdown')
packageVersion("rmarkdown")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
rmarkdown::render("selectedModelReport.Rmd")
render("selectedModelReport.Rmd")
